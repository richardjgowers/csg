#!/bin/bash
#
# Copyright 2011 The VOTCA Development Team (http://www.votca.org)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

version='@PROJECT_VERSION@ #CSG_HG_ID#'

#unset stuff from enviorment
unset CSGXMLFILE CSGDEBUG bondtype bondname

show_help () {
  cat << eof
==================================================
========   VOTCA (http://www.votca.org)   ========
==================================================

please submit bugs to bugs@votca.org

${0##*/}, version ${version}

Calculates pmf between two groups.

Usage: ${0##*/} --options xmlfile

Allowed options:
    --options FILE   Specify the options xml file to use
-h, --help           Show this help
eof
}

if [[ -n "$(type -p csg_call)" ]]; then
  CSGSHARE="$(csg_call --show-share)" || exit 1
  export CSGSHARE
else
  echo "Could not find csg_call" >&2
  exit 1
fi

if [ -f ${CSGSHARE}/scripts/inverse/start_framework.sh ]; then
  source ${CSGSHARE}/scripts/inverse/start_framework.sh || die "Could not source start_framework.sh"
else
  die "Could not find start_framework.sh"
fi

while [[ ${1#-} != $1 ]]; do
 if [[ ${1#--} = $1 && -n ${1:2} ]]; then
    #short opt with arguments here: fc
    if [ "${1#-[fc]}" != "${1}" ]; then
       set -- "${1:0:2}" "${1:2}" "${@:2}"
    else
       set -- "${1:0:2}" "-${1:2}" "${@:2}"
    fi
 fi
 case $1 in
   --options)
    CSGXMLFILE="$2"
    [[ -f $CSGXMLFILE ]] || die "options xml file '$CSGXMLFILE' not found"
    export CSGXMLFILE="$(globalize_file "${CSGXMLFILE}")"
    shift 2;;
   --nocolor)
    export CSGNOCOLOR="yes"
    shift;; 
   --debug)
    export CSGDEBUG="yes"
    shift;; 
   --ia-name)
    export bondname="$2"
    shift 2;;
   -h | --help)
    show_help
    exit 0;;
  *)
   die "Unknown option '$1'";;
 esac
done

[[ -z ${CSGXMLFILE} ]] && die "Please specify your setting xml file behind the --options option!"

enable_logging
[[ -n $CSGDEBUG ]] && set -x
check_for_obsolete_xml_options

sim_prog="$(csg_get_property cg.inverse.program)"
[ "$sim_prog" = "gromacs" ] || die "${0##*/} only supports gromacs at this point"
echo "We are using Sim Program: $sim_prog"
source_function $sim_prog

[[ -z $bondtype ]] && export bondtype="non-bonded"
[[ $bondtype != "non-bonded" ]] && die "${0##*/} only supports non-bonded interactions"

check_for_duplicated_interactions
interaction_names=( $(csg_get_property cg.non-bonded.name) )
if [[ ${#interaction_names[@]} -eq 1 ]]; then
  export bondname="${interaction_names[0]}"
else
  [[ -z "$bondname" ]] && die "There multiple interaction in ${CSGXMLFILE##*/}, please specify the name of the one to use behind the --ia-name option"
fi
unset interaction_names
msg "We are doing pmf calculation for interaction $bondname"

main_dir=$(get_main_dir)

filelist="$(csg_get_property --allow-empty cg.inverse.filelist)"
[ -z "$filelist" ] || echo "We extra cp '$filelist' to every step to run the simulation"

scriptdir="$(csg_get_property --allow-empty cg.inverse.scriptdir)"
[[ -n $scriptdir ]] && add_to_csgshare "$scriptdir"

show_csg_tables

mdrun="$(csg_get_property --allow-empty cg.inverse.gromacs.mdrun.bin "mdrun")"

#----------------------------------------------------------------------------------------------------
# Step 0 - Initialization
update_stepnames 0

this_dir=$(get_current_step_dir --no-check)
pmf_step=$(basename $this_dir)

if [ -f $this_dir/done ]; then
  msg "step $pmf_step is already done - skipping"
else 
  msg "---------------"
  msg "Doing $pmf_step"
  msg "---------------"
  mkdir -p $this_dir || die "mkdir -p $this_dir failed"
  cd $this_dir || die "cd $this_dir failed"
  set +x
  cp_from_main_dir $filelist

  do_external initialize pmf

  touch "done"
  echo "$pmf_step is done"
  cd $main_dir
fi

# Step 1 - Generate configurations
update_stepnames 1
this_dir=$(get_current_step_dir --no-check)
last_dir=$(get_last_step_dir)
pmf_step=$(basename $this_dir)
msg "---------------"
msg "Doing $pmf_step"
msg "---------------"
if [ -f $this_dir/done ]; then
  msg "step $pmf_step is already done - skipping"
else
  mkdir -p $this_dir || die "mkdir -p $this_dir failed"
  cd $this_dir || die "cd $this_dir failed"
  cp_from_main_dir $filelist
  if [ -f $last_dir/confout.gro ]; then
    cp_from_last_step confout.gro 
    critical mv confout.gro conf.gro
  else
    cp_from_last_step conf.gro
  fi

  do_external prepare pmf

  touch "done"
  echo "$pmf_step is done"
  cd $main_dir
fi

# Step 2 - Run simulations
update_stepnames 2
this_dir=$(get_current_step_dir --no-check)
last_dir=$(get_last_step_dir)
pmf_step=$(basename $this_dir)
msg "---------------"
msg "Doing $pmf_step"
msg "---------------"

if [ -f $this_dir/done ]; then
  msg "step $pmf_step is already done - skipping"
else
  mkdir -p $this_dir || die "mkdir -p $this_dir failed"
  cd $this_dir || die "cd $this_dir failed"
  cp_from_main_dir $filelist
  cp_from_last_step conf_start*.gro

  do_external simulate pmf

  touch "done"
  echo "$pmf_step is done"
  cd $main_dir
fi

# Step 3 - Calculate pmf
update_stepnames 3
this_dir=$(get_current_step_dir --no-check)

last_dir=$(get_last_step_dir)
pmf_step=$(basename $this_dir)
msg "---------------"
msg "Doing $pmf_step"
msg "---------------"

if [ -f $this_dir/done ]; then
  msg "step $pmf_step is already done - skipping"
else
  mkdir -p $this_dir || die "mkdir -p $this_dir failed"
  cd $this_dir || die "cd $this_dir failed"

  do_external calc pmf

  touch "done"
  echo "$pmf_step is done"
  cd $main_dir
fi

echo "Done!"
