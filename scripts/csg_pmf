#!/bin/bash
#
# Copyright 2011 The VOTCA Development Team (http://www.votca.org)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

verbose="no"

#unset stuff from enviorment
unset CSGXMLFILE bondtype bondname CSGSCRIPTDIR  CSGLOG

#failback define
die() {
  echo -e "$*" >&2
  exit 1
}

vecho() {
  [ "$verbose" = "yes" ] && echo -e "$*"
}

show_help () {
  cat << eof
==================================================
========   VOTCA (http://www.votca.org)   ========
==================================================

please submit bugs to bugs@votca.org

${0##*/}, version ${version}



This script runs csg_pmf using source_wrapper

Usage: ${0##*/} --options xmlfile

Allowed options:
    --options FILE   Specify the options xml file to use
-h, --help           Show this help

USES: \$CSGSHARE
eof
}

while [ "${1#-}" != "$1" ]; do
 if [ "${1#--}" = "$1" ] && [ -n "${1:2}" ]; then
    #short opt with arguments here: fc
    if [ "${1#-[fc]}" != "${1}" ]; then
       set -- "${1:0:2}" "${1:2}" "${@:2}"
    else
       set -- "${1:0:2}" "-${1:2}" "${@:2}"
    fi
 fi
 case $1 in
   --options)
    export CSGXMLFILE="$2"
    shift 2;;
   -h | --help)
    show_help
    exit 0;;
  *)
   die "Unknown option '$1'";;
 esac
done

if [ -z "${CSGSHARE}" ]; then
  if [ -f "${0%/*}/../share/votca/scripts/inverse/inverse.sh" ]; then
    #transform it to a global path
    export CSGSHARE="$(cd ${0%/*}/../share/votca;pwd)"
  elif [ -f "@votcashare@/scripts/inverse/inverse.sh" ]; then
    export CSGSHARE="@votcashare@"
  else
    echo "Error: Environment value CSGSHARE is not defined and could not be guessed" >&2
    echo "Export CSGSHARE or source VOTCARC.bash or VOTCARC.csh" >&2
    exit 1
  fi
else
  if [ ! -f ${CSGSHARE}/scripts/inverse/inverse.sh ]; then
    echo "Error: Environment value CSGSHARE seems to be wrong" >&2
    echo "Could not find \${CSGSHARE}/scripts/inverse/inverse.sh" >&2
    echo "Export CSGSHARE or source VOTCARC.bash or VOTCARC.csh" >&2
    exit 1
  fi
fi

vecho "CSGSHARE is ${CSGSHARE}"
if [ -f ${CSGSHARE}/scripts/inverse/start_framework.sh ]; then
  source ${CSGSHARE}/scripts/inverse/start_framework.sh || die "Could not source start_framework.sh"
else
  die "Could not find start_framework.sh"
fi
add_csg_scriptdir

[ -z "$CSGXMLFILE" ] && die "Script will need some options from the xml file\nPlease specify it with --options option"
[ ! -f "$CSGXMLFILE" ] && die "options xml file '$CSGXMLFILE' not found"

# Make CSGXMLFILE a global path
[ "${CSGXMLFILE%/*}" = "${CSGXMLFILE}" ] && cpath="." || cpath="${CSGXMLFILE%/*}"
cpath="$(cd $cpath;pwd)"
export CSGXMLFILE="${cpath}/${CSGXMLFILE##*/}"
[ -f "$CSGXMLFILE" ] || die "${0##*/}: could not find ${CSGXMLFILE##*/} (long version: $CSGXMLFILE"
unset cpath

main_dir=$(get_main_dir)

filelist="$(csg_get_property --allow-empty cg.inverse.filelist)"
[ -z "$filelist" ] || echo "We extra cp '$filelist' to every step to run the simulation"

# Step 0 - Initialization
update_stepnames 0
this_dir=$(get_current_step_dir --no-check)
pmf_step=$(basename $this_dir)

conf_in=$(csg_get_property --allow-empty cg.non-bonded.conf_in)

if [ -z "$conf_in" ]; then
  
  conf_init=$(csg_get_property cg.non-bonded.conf_init)
  mdp_init=$(csg_get_property cg.non-bonded.mdp_init)
  
  echo "---------------"
  echo "Doing $pmf_step"
  echo "---------------"
  mkdir -p $this_dir || die "mkdir -p $this_dir failed"
  cd $this_dir || die "cd $this_dir failed"

  cp_from_main_dir $filelist
  critical cp_from_main_dir grompp.mdp.template ${mdp_init} ${conf_init} 

  do_external initialize pmf
 
  index="$this_dir/index.ndx"
  grompp="$this_dir/grompp.mdp"
  touch "done"
  msg "$pmf_step is done"
  cd $main_dir
else
  mkdir step_000
  msg "$pmf_step is already done"
  conf_out=$(csg_get_property cg.non-bonded.conf_in)
  critical cp $(conf_out) step_000/confout.gro
  index=$(csg_get_property cg.non-bonded.index)
  grompp="$main_dir/grompp.mdp"
fi

# Step 1 - Generate configurations
update_stepnames 1
this_dir=$(get_current_step_dir --no-check)
last_dir=$(get_last_step_dir)
pmf_step=$(basename $this_dir)
echo "---------------"
echo "Doing $pmf_step"
echo "---------------"
mkdir -p $this_dir || die "mkdir -p $this_dir failed"

cd $this_dir || die "cd $this_dir failed"

cp_from_main_dir $filelist
critical cp_from_main_dir grompp.mdp.template 
critical cp_from_last_step confout.gro 
#critical cp_from_main_dir ${grompp} start_in.mdp
critical cp_from_main_dir start_in.mdp
critical mv confout.gro conf.gro

do_external prepare pmf

touch "done"
msg "$pmf_step is done"
cd $main_dir

# Step 3 - Run simulations
update_stepnames 2
this_dir=$(get_current_step_dir --no-check)
last_dir=$(get_last_step_dir)
pmf_step=$(basename $this_dir)
echo "---------------"
echo "Doing $pmf_step"
echo "---------------"
mkdir -p $this_dir || die "mkdir -p $this_dir failed"
cd $this_dir || die "cd $this_dir failed"

critical cp $last_dir/topol.top .
critical cp $last_dir/index.ndx .
critical cp $last_dir/grompp.mdp.template .
critical cp $last_dir/conf_start*.gro .
critical cp $last_dir/*.itp .
critical cp $last_dir/dist.xvg .

do_external simulate pmf

touch "done"
msg "$pmf_step is done"
cd $main_dir

# Step 4 - Calculate pmf
update_stepnames 3
this_dir=$(get_current_step_dir --no-check)
last_dir=$(get_last_step_dir)
pmf_step=$(basename $this_dir)
echo "---------------"
echo "Doing $pmf_step"
echo "---------------"
mkdir -p $this_dir || die "mkdir -p $this_dir failed"
cd $this_dir || die "cd $this_dir failed"

do_external calc pmf

touch "done"
msg "$pmf_step is done"
cd $main_dir

# Step 5 - Calculate rdf
update_stepnames 4
this_dir=$(get_current_step_dir --no-check)
last_dir=$(get_last_step_dir)
pmf_step=$(basename $this_dir)
echo "---------------"
echo "Doing $pmf_step"
echo "---------------"
mkdir -p $this_dir || die "mkdir -p $this_dir failed"
cd $this_dir || die "cd $this_dir failed"

critical cp $last_dir/grompp.mdp .

do_external calc rdf

touch "done"
msg "$pmf_step is done"
cd $main_dir
